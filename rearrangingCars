#include <iostream>
#include <unordered_map>
#include <utility>  
#include <vector>


using namespace std;


void printMoves(vector<pair<int, int> > moves) {
	for(auto it = moves.begin(); it != moves.end(); it++) {
		cout << "Move from " << it->first << " to" << it->second << endl;
	}
}

unordered_map<int, int> setPositions(int arrangements[], int N) {
	unordered_map<int , int> positions;
	for(int carPos = 0; carPos < N; carPos++) {
		positions[arrangements[carPos]] = carPos;
	}
	return positions;
}


void putCarInPlace(unordered_map<int, int> &currentPositions, vector<pair<int, int> > &moves, int carNum1, int carNum2) {
	int zeroPos = currentPositions[0];
	int carNum1Pos = currentPositions[carNum1];
	int carNum2Pos = currentPositions[carNum2];
	if(carNum1 == 0) {
		currentPositions[0] = carNum2Pos;
		currentPositions[carNum2] = zeroPos;
		moves.push_back(make_pair(carNum2Pos, zeroPos));
	}
	else {
		currentPositions[carNum1] = zeroPos;
		currentPositions[0] = carNum2Pos;
		currentPositions[carNum2] = carNum1Pos;
		moves.push_back(make_pair(carNum1Pos, zeroPos));
		moves.push_back(make_pair(carNum2Pos, carNum1Pos));
	}

}


vector<pair<int, int> > rearrangeCars(int N, int currentArrangement[], int finalArrangement[]) {
	unordered_map<int, int> currentPositions = setPositions(currentArrangement, N);
	vector<pair<int, int> > moves;
	for(int carPos = 0; carPos < N; carPos++) {
		if(currentPositions[carPos] == finalArrangement[carPos])
			continue;
		else {
			putCarInPlace(currentPositions, moves, currentArrangement[carPos], finalArrangement[carPos]);
		}
	}
	return moves;
}


int main() {
	int arr1[4] = {1, 2, 0, 3};
	int arr2[4] = {3, 1, 2, 0};
	vector<pair<int, int> > moves = rearrangeCars(4, arr1, arr2);
	printMoves(moves);
}




